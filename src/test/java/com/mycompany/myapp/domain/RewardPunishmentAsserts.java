package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RewardPunishmentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRewardPunishmentAllPropertiesEquals(RewardPunishment expected, RewardPunishment actual) {
        assertRewardPunishmentAutoGeneratedPropertiesEquals(expected, actual);
        assertRewardPunishmentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRewardPunishmentAllUpdatablePropertiesEquals(RewardPunishment expected, RewardPunishment actual) {
        assertRewardPunishmentUpdatableFieldsEquals(expected, actual);
        assertRewardPunishmentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRewardPunishmentAutoGeneratedPropertiesEquals(RewardPunishment expected, RewardPunishment actual) {
        assertThat(expected)
            .as("Verify RewardPunishment auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRewardPunishmentUpdatableFieldsEquals(RewardPunishment expected, RewardPunishment actual) {
        assertThat(expected)
            .as("Verify RewardPunishment relevant properties")
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getReason()).as("check reason").isEqualTo(actual.getReason()))
            .satisfies(e -> assertThat(e.getApplyDate()).as("check applyDate").isEqualTo(actual.getApplyDate()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRewardPunishmentUpdatableRelationshipsEquals(RewardPunishment expected, RewardPunishment actual) {
        assertThat(expected)
            .as("Verify RewardPunishment relationships")
            .satisfies(e -> assertThat(e.getEmployee()).as("check employee").isEqualTo(actual.getEmployee()));
    }
}
