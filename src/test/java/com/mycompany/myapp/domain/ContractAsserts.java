package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContractAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractAllPropertiesEquals(Contract expected, Contract actual) {
        assertContractAutoGeneratedPropertiesEquals(expected, actual);
        assertContractAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractAllUpdatablePropertiesEquals(Contract expected, Contract actual) {
        assertContractUpdatableFieldsEquals(expected, actual);
        assertContractUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractAutoGeneratedPropertiesEquals(Contract expected, Contract actual) {
        assertThat(expected)
            .as("Verify Contract auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractUpdatableFieldsEquals(Contract expected, Contract actual) {
        assertThat(expected)
            .as("Verify Contract relevant properties")
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getContractCode()).as("check contractCode").isEqualTo(actual.getContractCode()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractUpdatableRelationshipsEquals(Contract expected, Contract actual) {
        assertThat(expected)
            .as("Verify Contract relationships")
            .satisfies(e -> assertThat(e.getContractType()).as("check contractType").isEqualTo(actual.getContractType()));
    }
}
