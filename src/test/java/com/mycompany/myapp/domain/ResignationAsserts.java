package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ResignationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResignationAllPropertiesEquals(Resignation expected, Resignation actual) {
        assertResignationAutoGeneratedPropertiesEquals(expected, actual);
        assertResignationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResignationAllUpdatablePropertiesEquals(Resignation expected, Resignation actual) {
        assertResignationUpdatableFieldsEquals(expected, actual);
        assertResignationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResignationAutoGeneratedPropertiesEquals(Resignation expected, Resignation actual) {
        assertThat(expected)
            .as("Verify Resignation auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResignationUpdatableFieldsEquals(Resignation expected, Resignation actual) {
        assertThat(expected)
            .as("Verify Resignation relevant properties")
            .satisfies(e -> assertThat(e.getSubmissionDate()).as("check submissionDate").isEqualTo(actual.getSubmissionDate()))
            .satisfies(e -> assertThat(e.getEffectiveDate()).as("check effectiveDate").isEqualTo(actual.getEffectiveDate()))
            .satisfies(e -> assertThat(e.getReason()).as("check reason").isEqualTo(actual.getReason()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResignationUpdatableRelationshipsEquals(Resignation expected, Resignation actual) {
        assertThat(expected)
            .as("Verify Resignation relationships")
            .satisfies(e -> assertThat(e.getEmployee()).as("check employee").isEqualTo(actual.getEmployee()));
    }
}
