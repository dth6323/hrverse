package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContractTerminationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractTerminationAllPropertiesEquals(ContractTermination expected, ContractTermination actual) {
        assertContractTerminationAutoGeneratedPropertiesEquals(expected, actual);
        assertContractTerminationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractTerminationAllUpdatablePropertiesEquals(ContractTermination expected, ContractTermination actual) {
        assertContractTerminationUpdatableFieldsEquals(expected, actual);
        assertContractTerminationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractTerminationAutoGeneratedPropertiesEquals(ContractTermination expected, ContractTermination actual) {
        assertThat(expected)
            .as("Verify ContractTermination auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractTerminationUpdatableFieldsEquals(ContractTermination expected, ContractTermination actual) {
        assertThat(expected)
            .as("Verify ContractTermination relevant properties")
            .satisfies(e -> assertThat(e.getTerminationDate()).as("check terminationDate").isEqualTo(actual.getTerminationDate()))
            .satisfies(e -> assertThat(e.getReason()).as("check reason").isEqualTo(actual.getReason()))
            .satisfies(e -> assertThat(e.getCompensation()).as("check compensation").isEqualTo(actual.getCompensation()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractTerminationUpdatableRelationshipsEquals(ContractTermination expected, ContractTermination actual) {
        assertThat(expected)
            .as("Verify ContractTermination relationships")
            .satisfies(e -> assertThat(e.getContract()).as("check contract").isEqualTo(actual.getContract()));
    }
}
